{"ast":null,"code":"import _objectSpread from \"D:\\\\WEB\\\\React\\\\Small_Projects\\\\todo-list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\WEB\\\\React\\\\Small_Projects\\\\todo-list\\\\src\\\\Containers\\\\MainScreen\\\\Screens\\\\TodoListScreen\\\\TodoListScreen.js\";\nimport React, { Component } from 'react';\nimport classes from './TodoListScreen.module.css';\nimport Task from '../../../../Components/Task/Task';\n\nclass TodoListScreen extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.taskInputChangeHandler = event => {\n      let text = event.target.value;\n      this.props.store.set(\"currentInputText\", text);\n    };\n\n    this.addTask = event => {\n      let taskObj = {\n        id: new Date().getTime(),\n        taskText: this.props.store.currentList.currentInputText,\n        checked: false\n      };\n      let tasks = [this.props.store.currentList.tasks];\n      tasks.push(taskObj);\n      this.props.store.set(\"tasks\", tasks);\n      this.props.store.set(\"currentInputText\", '');\n    };\n\n    this.removeTask = id => {\n      let newTasks = this.state.tasks.filter(el => el.id !== id);\n      this.setState(_objectSpread({}, this.state, {\n        tasks: newTasks\n      }));\n    };\n\n    this.checkboxHandler = index => {\n      let newTasks = [...this.state.tasks];\n      newTasks[index].checked = !newTasks[index].checked;\n      this.setState({\n        tasks: newTasks\n      });\n    };\n  }\n\n  render() {\n    let doneTasks = [];\n    let notDoneTasks = [];\n    doneTasks = this.props.currentList.tasks.map((el, index) => {\n      if (el.checked) {\n        return React.createElement(Task, {\n          key: el.id,\n          id: el.id,\n          index: index,\n          text: el.taskText,\n          checked: el.checked,\n          checkboxHandler: this.checkboxHandler,\n          removeTask: this.removeTask,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      } else {\n        notDoneTasks.push(React.createElement(Task, {\n          key: el.id,\n          id: el.id,\n          index: index,\n          text: el.taskText,\n          checked: el.checked,\n          checkboxHandler: this.checkboxHandler,\n          removeTask: this.removeTask,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }));\n      }\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.props.currentList.title), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: event => this.taskInputChangeHandler(event),\n      size: \"40\",\n      value: this.props.currentList.currentInputText,\n      placeholder: \"Write your next task here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: event => this.addTask(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Add\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Should be done:\"), React.createElement(\"ul\", {\n      className: classes.list,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, notDoneTasks), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Done:\"), React.createElement(\"ul\", {\n      className: classes.list,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, doneTasks));\n  }\n\n}\n\nexport default TodoListScreen;","map":{"version":3,"sources":["D:\\WEB\\React\\Small_Projects\\todo-list\\src\\Containers\\MainScreen\\Screens\\TodoListScreen\\TodoListScreen.js"],"names":["React","Component","classes","Task","TodoListScreen","taskInputChangeHandler","event","text","target","value","props","store","set","addTask","taskObj","id","Date","getTime","taskText","currentList","currentInputText","checked","tasks","push","removeTask","newTasks","state","filter","el","setState","checkboxHandler","index","render","doneTasks","notDoneTasks","map","title","list"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport classes from './TodoListScreen.module.css'\r\nimport Task from '../../../../Components/Task/Task';\r\n\r\nclass TodoListScreen extends Component{\r\n\r\n\ttaskInputChangeHandler = (event) => {\r\n\t\tlet text = event.target.value;\r\n\t\tthis.props.store.set(\"currentInputText\", text)\r\n\t}\r\n\r\n\taddTask = (event) => {\r\n\t\tlet taskObj = {\r\n\t\t\tid: new Date().getTime(),\r\n\t\t\ttaskText: this.props.store.currentList.currentInputText,\r\n\t\t\tchecked: false\r\n\t\t}\r\n\t\tlet tasks = [this.props.store.currentList.tasks];\r\n\t\ttasks.push(taskObj);\r\n\r\n\t\tthis.props.store.set(\"tasks\", tasks);\r\n\t\tthis.props.store.set(\"currentInputText\", '');\r\n\t}\r\n\r\n\tremoveTask = (id) => {\r\n\t\tlet newTasks = this.state.tasks.filter(el=>el.id!==id);\r\n\t\tthis.setState({\r\n\t\t\t...this.state,\r\n\t\t\ttasks: newTasks\r\n\t\t})\r\n\t}\r\n\r\n\tcheckboxHandler = (index) => {\r\n\r\n\t\tlet newTasks = [\r\n\t\t\t...this.state.tasks,\r\n\t\t]\r\n\t\t\tnewTasks[index].checked = !newTasks[index].checked;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttasks: newTasks\r\n\t\t})\r\n\t\t}\r\n\r\n\trender(){\r\n\t\tlet doneTasks = [];\r\n\t\tlet notDoneTasks = [];\r\n\t\r\n\t\tdoneTasks = this.props.currentList.tasks.map((el, index) => {\r\n\t\t\t\t\tif(el.checked){\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Task key={el.id} \r\n\t\t\t\t\t\t\t  id={el.id} \r\n\t\t\t\t\t\t\t  index={index}\r\n\t\t\t\t\t\t\t  text={el.taskText} \r\n\t\t\t\t\t\t\t  checked={el.checked} \r\n\t\t\t\t\t\t\t  checkboxHandler={this.checkboxHandler}\r\n\t\t\t\t\t\t\t  removeTask = {this.removeTask}/>\r\n\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tnotDoneTasks.push(<Task key={el.id} \r\n\t\t\t\t\t\t\t  id={el.id} \r\n\t\t\t\t\t\t\t  index={index}\r\n\t\t\t\t\t\t\t  text={el.taskText} \r\n\t\t\t\t\t\t\t  checked={el.checked} \r\n\t\t\t\t\t\t\t  checkboxHandler={this.checkboxHandler}\r\n\t\t\t\t\t\t\t  removeTask = {this.removeTask}/>)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t  \r\n\t\t)\r\n\r\n\r\n\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{this.props.currentList.title}</h2>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tonChange={(event)=>this.taskInputChangeHandler(event)} \r\n\t\t\t\t\tsize=\"40\" value={this.props.currentList.currentInputText} \r\n\t\t\t\t\tplaceholder=\"Write your next task here...\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t<button onClick={(event)=>this.addTask(event)}>Add</button>\r\n\t\t\t\t<h3>Should be done:</h3>\r\n\t\t\t\t<ul className={classes.list}>\r\n\t\t\t\t\t{notDoneTasks}\r\n\t\t\t\t</ul>\r\n\t\t\t\t<h3>Done:</h3>\r\n\t\t\t\t<ul className={classes.list}>\r\n\t\t\t\t\t{doneTasks}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default TodoListScreen;"]},"metadata":{},"sourceType":"module"}